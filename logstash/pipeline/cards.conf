input {
    jdbc {
        jdbc_connection_string => "${SPRING_DATASOURCE_URL}"
        jdbc_user => "${SPRING_DATASOURCE_USERNAME}"
        jdbc_password => "${SPRING_DATASOURCE_PASSWORD}"
        jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/postgresql.jar"
        jdbc_driver_class => "org.postgresql.Driver"
        jdbc_paging_enabled => true
        schedule => "*/10 * * * * *"
        statement =>
            "
            SELECT
            c.id AS card_id,
            c.evolves_from_id,
            c.stage,
            c.name,
            c.hp,
            c.attack_skills::text AS attack_skills,
            c.weakness_type,
            c.resistance_type,
            c.retreat_cost,
            c.game_set,
            c.pokemon_type,
            c.regulation_mark,
            c.card_number,
            s.id AS pokemon_owner_id,
            s.first_name,
            s.last_name,
            s.student_group
            FROM pokemon.cards c
            LEFT JOIN pokemon.students s ON c.pokemon_owner_id = s.id
            "
    }
}

filter {
    json {
        source => "attack_skills"
        target => "attack_skills_parsed"
    }
    mutate {
        rename => { "attack_skills_parsed" => "attack_skills" }
    }
    aggregate {
        task_id => "%{card_id}"
        code => "
        map['card_id'] = event.get('card_id')
        map['evolves_from_id'] = event.get('evolves_from_id')
        map['stage'] = event.get('stage')
        map['name'] = event.get('name')
        map['hp'] = event.get('hp')
        map['attack_skills'] = event.get('attack_skills')
        map['weakness_type'] = event.get('weakness_type')
        map['resistance_type'] = event.get('resistance_type')
        map['retreat_cost'] = event.get('retreat_cost')
        map['game_set'] = event.get('game_set')
        map['pokemon_type'] = event.get('pokemon_type')
        map['regulation_mark'] = event.get('regulation_mark')
        map['card_number'] = event.get('card_number')
        if event.get('pokemon_owner_id')
        map['pokemon_owner'] = {
           'owner_id' => event.get('pokemon_owner_id'),
           'first_name' => event.get('first_name'),
           'last_name' => event.get('last_name'),
           'student_group' => event.get('student_group')
        }
        else
           map['pokemon_owner'] = nil
        end
        event.cancel()
        "
        push_previous_map_as_event => true
        timeout => 30
    }
}

output {
    elasticsearch {
        hosts => "elasticsearch:9200"
        index => "cards"
        document_id => "%{card_id}"
        user => "logstash_internal"
        password => "${LOGSTASH_INTERNAL_PASSWORD}"
    }
}