services:
  admin-server:
    container_name: admin-server
    build:
      context: ./pokemon-admin-server
      dockerfile: Dockerfile
    ports:
        - '8090:8090'
    networks:
      - pokemon-network

  pokemon-api:
    build:
      context: ./pokemon-api
      dockerfile: Dockerfile
    ports:
      - '8082:8082'
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      KEYCLOAK_AUTH_SERVER_URL: ${KEYCLOAK_AUTH_SERVER_URL}
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      SPRING_JPA_HIBERNATE_DDL_AUTO: none
      FLYWAY_ENABLED: true

      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD:-}
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD:-}
      MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
    depends_on:
      postgres:
        condition: service_started
      elasticsearch:
        condition: service_started
      keycloak:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - pokemon-network
      - elk

  pokemon-client:
    build:
      context: ./pokemon-client
      dockerfile: Dockerfile
    ports:
      - '8081:8081'
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: none
      FLYWAY_ENABLED: true
    depends_on:
      postgres:
        condition: service_started
      keycloak:
        condition: service_healthy
    networks:
      - pokemon-network

  postgres:
    container_name: 'db'
    image: 'postgres:17.2-alpine'
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - pokemon-network

  keycloak:
    container_name: keycloak.openid-provider
    image: quay.io/keycloak/keycloak:25.0.1
    command:
      - start-dev
      - --import-realm
    ports:
      - 8080:8080
    volumes:
      - ./keycloak/:/opt/keycloak/data/import/
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_HTTP_PORT: 8080
      KC_HOSTNAME_URL: http://localhost:8080
      KC_HOSTNAME_ADMIN_URL: http://localhost:8080
      KC_HOSTNAME_STRICT_BACKCHANNEL: true
      KC_HTTP_RELATIVE_PATH: /
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: [ "CMD-SHELL", "exec 3<> /dev/tcp/127.0.0.1/9000; echo -e 'GET /health/ready HTTP/1.1\\r\\nhost: http://localhost\\r\\nConnection: close\\r\\n\\r\\n' >&3; if [ $? -eq 0 ]; then echo 'Healthcheck Successful'; exit 0; else echo 'Healthcheck Failed'; exit 1; fi;" ]
      start_period: 5s
    networks:
      - pokemon-network

  redis:
    image: "redislabs/redismod"
    ports:
      - "6379:6379"
    volumes:
      - ./data:/data
    entrypoint: >
      redis-server
        --loadmodule /usr/lib/redis/modules/redisai.so
          ONNX redisai_onnxruntime/redisai_onnxruntime.so
          TF redisai_tensorflow/redisai_tensorflow.so
          TFLITE redisai_tflite/redisai_tflite.so
          TORCH redisai_torch/redisai_torch.so   
        --loadmodule /usr/lib/redis/modules/redisearch.so
        --loadmodule /usr/lib/redis/modules/redisgraph.so
        --loadmodule /usr/lib/redis/modules/redistimeseries.so
        --loadmodule /usr/lib/redis/modules/rejson.so
        --loadmodule /usr/lib/redis/modules/redisbloom.so
        --loadmodule /usr/lib/redis/modules/redisgears.so
        --appendonly yes
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - pokemon-network

volumes:
  postgres_data:
  elasticsearch:

networks:
  pokemon-network:
    driver: bridge

include:
  - docker-compose.elk.yml
